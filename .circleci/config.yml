version: 2.1

default_image: &docker_image
  docker:
    - image: circleci/node:13.8.0
commands:
  install_build_cache:
    steps:
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Install
          command: |
            npm install
      - run:
          name: Build
          command: |
            npm run build
      - save_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/project/
  analyze:
    steps:
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Analyze
          command: |
            npm audit --audit-level=critical

jobs:
  checkout_code:
    <<: *docker_image
    working_directory: ~/project
    steps:
      - checkout
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Install Frontend dependencies
          command: |
            cd ~/project/frontend && npm i
      - run:
          name: Install Backend dependencies
          command: |
            cd ~/project/backend && npm i

      - save_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/project

  frontend-build:
    <<: *docker_image
    working_directory: ~/project/frontend
    steps:
      - install_build_cache

  frontend-test:
    <<: *docker_image
    working_directory: ~/project/frontend
    steps:
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Run tests with JUnit as reporter
          command: npm run test
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./reports/junit/
      - store_test_results:
          path: ./reports/junit/
      - store_artifacts:
          path: ./reports/junit

  frontend-analyze:
    <<: *docker_image
    working_directory: ~/project/frontend
    steps:
      - analyze

  backend-build:
    <<: *docker_image
    working_directory: ~/project/backend
    steps:
      - install_build_cache

  backend-test:
    <<: *docker_image
    working_directory: ~/project/backend
    steps:
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Run tests with JUnit as reporter
          command: npm run test
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./reports/junit/
      - store_test_results:
          path: ./reports/junit/
      - store_artifacts:
          path: ./reports/junit
  backend-analyze:
    <<: *docker_image
    working_directory: ~/project/backend
    steps:
      - analyze
  create-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Create Backend Infrastructure
          command: |
            aws cloudformation deploy \
              --stack-name uda \
              --template-file .circleci/files/backend.yml \
              --region us-west-2 \
              --parameter-overrides "ID=1"
            PUBLIC_DNS=$(aws ec2 describe-instances --region us-west-2 --query "Reservations[*].Instances[0].PublicDnsName"  --output text)
            curl -H "Content-Type: text/plain" -H "token: bb9fa411-596b-45ef-ab32-8111e6af5491" --request PUT --data "$PUBLIC_DNS" https://api.memstash.io/values/public_dns

workflows:
  frontend:
    jobs:
      - checkout_code
      - frontend-build:
          requires:
            - checkout_code
      - frontend-test:
          requires:
            - frontend-build
      - frontend-analyze:
          requires:
            - frontend-test

  backend:
    jobs:
      - checkout_code
      - backend-build:
          requires:
            - checkout_code

      - backend-test:
          requires:
            - backend-build
      - backend-analyze:
          requires:
            - backend-test
      - create-infrastructure:
          requires:
            - backend-analyze
